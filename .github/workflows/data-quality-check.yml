name: AI-Enhanced Data Quality Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  data-quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install openai  # For AI analysis

    - name: Run Data Quality Check with AI Analysis
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/ci_cd_data_quality.py \
          --database-url "$DATABASE_URL" \
          --ai-provider openai \
          --ai-model gpt-4 \
          --github-token "$GITHUB_TOKEN" \
          --github-repo "${{ github.repository }}" \
          --pr-number "${{ github.event.pull_request.number }}" \
          --output-file data-quality-report.json \
          --verbose

    - name: Upload Data Quality Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: data-quality-report
        path: data-quality-report.json

    - name: Notify Slack on Failure
      if: failure()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [ -n "$SLACK_WEBHOOK" ]; then
          python scripts/ci_cd_data_quality.py \
            --database-url "$DATABASE_URL" \
            --slack-webhook "$SLACK_WEBHOOK" \
            --ai-provider openai \
            --verbose
        fi

  # Separate job for production monitoring (runs on schedule)
  production-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install openai

    - name: Monitor Production Database
      env:
        PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        python scripts/ci_cd_data_quality.py \
          --database-url "$PROD_DATABASE_URL" \
          --ai-provider openai \
          --ai-model gpt-4 \
          --slack-webhook "$SLACK_WEBHOOK" \
          --tables "songs,albums,artists,labels" \
          --fail-on-critical false \
          --output-file prod-health-report.json \
          --verbose

    - name: Upload Production Report
      uses: actions/upload-artifact@v3
      with:
        name: production-health-report
        path: prod-health-report.json